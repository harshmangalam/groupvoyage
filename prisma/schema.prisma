generator client {
  provider        = "prisma-client-js"
  output          = "./generated/client"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Location {
  id                String             @id @default(uuid())
  city              String
  slug              String             @unique
  country           String
  active            Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  posterUrl         String?
  events            Event[]
  groups            Group[]            @relation("GroupToLocation")
  instagramProfiles InstagramProfile[] @relation("InstagramProfileToLocation")
  destinations      Destination[]      @relation("LocationToDestination")
}

model Group {
  id           String        @id @default(uuid())
  name         String        @unique
  slug         String        @unique
  details      String
  instagram    String?
  phone        String?
  email        String?
  meta         Json?
  source       String
  active       Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  logo         String?
  posterUrls   String[]
  tagLine      String?
  events       Event[]
  locations    Location[]    @relation("GroupToLocation")
  destinations Destination[] @relation("GroupToDestination")
}

model Event {
  id           String        @id @default(uuid())
  title        String
  slug         String        @unique
  durations    String?
  details      String?
  price        Int?
  locationId   String
  groupId      String
  posterUrls   String[]
  meta         Json?
  includes     String[]
  excludes     String[]
  source       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isArchived   Boolean       @default(false)
  group        Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  location     Location      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  destinations Destination[] @relation("EventToDestination")
}

model InstagramProfile {
  id             String     @id @default(uuid())
  username       String     @unique
  name           String?
  followers      String?
  followersCount Int?
  following      String?
  posts          String?
  profilePic     String?
  locations      Location[] @relation("InstagramProfileToLocation")
}

model Destination {
  id        String     @id @default(uuid())
  name      String
  slug      String     @unique
  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  events    Event[]    @relation("EventToDestination")
  groups    Group[]    @relation("GroupToDestination")
  locations Location[] @relation("LocationToDestination")
}

model OrganiserSubmission {
  id         String   @id @default(uuid())
  websiteURL String   @unique
  locations  String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
