generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  raw
  processed
  failed
}

model Location {
  id                String             @id @default(uuid())
  city              String
  slug              String             @unique
  country           String
  posterUrl         String?
  events            Event[]
  groups            Group[]            @relation("GroupToLocation")
  instagramProfiles InstagramProfile[] @relation("InstagramProfileToLocation")
  destinations      Destination[]      @relation("LocationToDestination")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id                   String        @id @default(uuid())
  name                 String        @unique
  slug                 String        @unique
  details              String
  processedShortBio    String?
  processedDescription String?
  instagram            String?
  phone                String?
  email                String?
  meta                 Json?
  source               String
  logo                 String?
  posterUrls           String? // JSON array as string
  tagLine              String?
  events               Event[]
  locations            Location[]    @relation("GroupToLocation")
  destinations         Destination[] @relation("GroupToDestination")
  status               Status        @default(raw)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id                    String        @id @default(uuid())
  title                 String
  slug                  String        @unique
  durations             String?
  details               String?
  price                 Int?
  locationId            String
  groupId               String
  posterUrls            String? // JSON array as string
  meta                  Json?
  includes              String? // JSON array as string
  excludes              String? // JSON array as string
  source                String
  group                 Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  location              Location      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  destinations          Destination[] @relation("EventToDestination")
  categories            Category[]    @relation("EventToCategory")
  status                Status        @default(raw)
  categoriesGenerated   Boolean?
  destinationsGenerated Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InstagramProfile {
  id             String     @id @default(uuid())
  username       String     @unique
  name           String?
  followers      String?
  followersCount Int?
  following      String?
  posts          String?
  profilePic     String?
  locations      Location[] @relation("InstagramProfileToLocation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Destination {
  id        String     @id @default(uuid())
  name      String
  slug      String     @unique
  events    Event[]    @relation("EventToDestination")
  groups    Group[]    @relation("GroupToDestination")
  locations Location[] @relation("LocationToDestination")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id     String  @id @default(uuid())
  name   String
  slug   String  @unique
  events Event[] @relation("EventToCategory")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
